package Models.DataAccessLayer;

import Models.Ad;
import Models.Config;
import com.mysql.cj.jdbc.Driver;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * <p>The <code>MySQLAdsDao</code> is used to connect to a MySQL database and run queries that correspond to the
 * methods defined by the web application.</p>
 *
 * @author David Ryan Alviola
 * @since  3 February 2017
 */
public class MySQLAdsDao implements Ads {
    private Connection connection;

    /**
     * <p>Constructor for the <code>MySQLAdsDao</code> class. The <code>Statement</code> object is assigned in the
     * constructor so that the same object can be used to run queries throughout the class without having to create
     * new <code>Statement</code> objects within each method.</p>
     *
     * @throws SQLException
     */
    public MySQLAdsDao () {

        try {
            DriverManager.registerDriver(new Driver());
            connection = DriverManager.getConnection(
                    Config.url,
                    Config.user,
                    Config.password
            );
        } catch (SQLException e) {
            throw new RuntimeException("Error @ MySQLAdsDao constructor.", e);
        }
    }

    /**
     * <p>This method runs a query in the database to select all rows. A <code>ResultSet</code> object is returned
     * and the createAdsFromResults method is used to generate a List of <code>Ad</code> objects.</p>
     *
     * @return a List of <code>Ad</code> objects representing the ads in the database
     * @throws SQLException
     */
    @Override
    public List<Ad> all() {

        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from ads");
            return createAdsFromResults(resultSet);
        } catch (SQLException e) {
            throw new RuntimeException("Error @ MySQLAdsDao.all().", e);
        }
    }

    /**
     * <p>This method takes an <code>Ad</code> object and inserts its properties as a row in the database.</p>
     *
     * @param ad an <code>Ad</code> object
     * @return a long value representing the ID number generated by the database for the new ad
     */
    @Override
    public Long insert(Ad ad) {
        String sql = "INSERT INTO ads(user_id, title, description) VALUES (?, ?, ?)";

        try {
            PreparedStatement statement = connection.prepareStatement(sql,
                    Statement.RETURN_GENERATED_KEYS);
            statement.setLong(1, ad.getUserId());
            statement.setString(2, ad.getTitle());
            statement.setString(3, ad.getDescription());

            statement.executeUpdate();
            ResultSet resultSet = statement.getGeneratedKeys();

            if (resultSet.next()){
                return resultSet.getLong(1);
            } else {
                return null;
            }
        } catch (SQLException e) {
            throw new RuntimeException("Error @ MySQLAdsDao.insert.", e);
        }
    }

    /**
     *<p>This method searches through the database for an ad with the ID number that was passed in</p>
     *
     * @param idNumber a long value representing the ID of the ad being searched for
     * @return List of <code>Ad</code> objects matching the ID number (should only be one ad)
     */
    @Override
    public List<Ad> searchAdsByID(Long idNumber) {
        String sql = "SELECT * FROM ads WHERE id = ?";

        try {
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setLong(1, idNumber);

            ResultSet resultSet = statement.executeQuery();
            return createAdsFromResults(resultSet);
        } catch (SQLException e) {
            throw new RuntimeException("Error @ searchAdsByID", e);
        }
    }

    /**
     * <p></p>
     *
     * @param title a string value representing the title of the ad being searched for
     * @return
     */
    @Override
    public List<Ad> searchAdsByTitle(String title) {
        String sql = "SELECT * FROM ads WHERE title LIKE ?";

        try {
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, "%" + title + "%");

            ResultSet resultSet = statement.executeQuery();
            return createAdsFromResults(resultSet);
        } catch (SQLException e) {
            throw new RuntimeException("Error @ searchAdsByTitle", e);
        }
    }

    @Override
    public List<Ad> searchAdsByUserID(Long userID) {
        String sql = "SELECT * FROM ads WHERE user_id = ?";

        try {
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setLong(1, userID);

            ResultSet resultSet = statement.executeQuery();
            return createAdsFromResults(resultSet);
        } catch (SQLException e) {
            throw new RuntimeException("Error @ searchAdsByUserID", e);
        }
    }

    private Ad extractAd(ResultSet resultSet) throws SQLException {

        Ad ad = new Ad(
                resultSet.getLong("id"),
                resultSet.getLong("user_id"),
                resultSet.getString("title"),
                resultSet.getString("description")
        );
        ad.setUsername(getUsernameFromID(ad.getUserId()));

        return ad;
    }

    private List<Ad> createAdsFromResults(ResultSet resultSet) throws SQLException {
        List<Ad> ads = new ArrayList<>();

        while (resultSet.next()) {
            ads.add(extractAd(resultSet));
        }
        return ads;
    }

    public String getUsernameFromID (long idNumber) {
        String sql = "SELECT username " +
                     "FROM users " +
                     "JOIN ads ON users.id = ads.user_id " +
                     "WHERE user_id = ?";

        try {
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setLong(1, idNumber);

            ResultSet resultSet = statement.executeQuery();

            if(resultSet.next()) {
                return resultSet.getString("username");
            } else {
                return null;
            }
        } catch (SQLException e) {
            throw new RuntimeException("Error @ getUsernameFromID.", e);
        }
    }
 }
